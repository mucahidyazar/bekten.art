// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  ARTIST
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  profession    String?
  description   String?
  location      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  artworks Artwork[]

  shareData     Boolean @default(false)
  shareSomeData Boolean @default(false)
  receiveEmails Boolean @default(false)

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  artworkLikes      ArtworkLike[]
  socials           Social[]
  senderFeedbacks   Feedback[]    @relation("sender")
  receiverFeedbacks Feedback[]    @relation("receiver")
  press             Press[]
  news              News[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model ArtworkLike {
  id        String @id @default(cuid())
  userId    String
  artworkId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@map(name: "artwork_likes")
}

// keep the social media accounts of the users
model Social {
  id        String   @id @default(cuid())
  userId    String
  platform  String
  username  String
  url       String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "socials")
}

enum ArtworkStatus {
  ON_SALE
  ARCHIVED
  SOLD
}

model Artwork {
  id          String        @id @default(cuid())
  name        String // Eserin adı
  description String? // Eser hakkında kısa bir açıklama
  images      String[] // Eserin görselinin URL'si
  price       Float // Eserin fiyatı (İsterseniz Decimal tipini de kullanabilirsiniz daha hassas bir fiyatlandırma için)
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime      @default(now()) @map(name: "updated_at")
  buyLink     String? // Eserin satın alınabileceği link
  nftLink     String? // OpenSea'daki NFT linki
  artistId    String // Sanatçıya referans vermek için
  quantity    Int?          @default(1) // Eserin kaç adet olduğu
  likes       ArtworkLike[]
  status      ArtworkStatus @default(ON_SALE)

  artist User @relation(fields: [artistId], references: [id])

  @@map(name: "artworks")
}

enum Status {
  IN_PROGRESS
  ACCEPTED
}

model Feedback {
  id         String   @id @default(cuid())
  message    String
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")
  senderId   String
  receiverId String

  sender   User? @relation("sender", fields: [senderId], references: [id])
  receiver User  @relation("receiver", fields: [receiverId], references: [id])

  status Status @default(IN_PROGRESS)

  @@map(name: "feedbacks")
}

model Press {
  id    String @id @default(cuid())
  title String
  link  String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String

  user User @relation(fields: [userId], references: [id])

  @@map(name: "press")
}

model News {
  id          String    @id @default(cuid())
  title       String
  subtitle    String
  location    String?
  address     String?
  date        DateTime?
  note        String?
  image       String
  description String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String

  user User @relation(fields: [userId], references: [id])

  @@map(name: "news")
}
